plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
    withJavadocJar()
    //withSourcesJar()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId 'com.zitlab.palmyra'
            artifactId 'jpalmyra-lib'
            version '1.0'

            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = 'JPalmyra Library'
                description = 'Palmyra API client written in java.'
                url = 'https://github.com/biocliq/mobyra'
                properties = [
                        myProp          : "value",
                        "prop.with.dots": "anotherValue"
                ]
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'ksvraja'
                        name = 'Raja K'
                        email = 'ksvraja@gmail.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com:biocliq/mobyra.git'
                    developerConnection = 'scm:git:ssh://github.com:biocliq/mobyra.git'
                    url = 'https://github.com/biocliq/mobyra'
                }
            }
        }
    }

    repositories {
        maven {
            name = "JPalmyra" //  optional target repository name
            url = "https://github.com/biocliq/mobyra"
            //credentials {
            //    username = 'ksvraja'
            //    password = 'my-password'
            //}
            // change URLs to point to your repos, e.g. http://my.org/repo
            def releasesRepoUrl = "$buildDir/repos/releases"
            def snapshotsRepoUrl = "$buildDir/repos/snapshots"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
        }
    }
}

signing {

    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign configurations.archives
    //sign publishing.publications.mavenJava
    //sign stuffZip
}


javadoc {
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}


dependencies {
    implementation project(':palmyra-core-lib')

    //Apache codec for Digest.
    implementation("commons-codec:commons-codec:1.15")
    //GSON: Convert Java Objects into their JSON representation.
    implementation 'com.google.code.gson:gson:2.8.6'

    // define a okhttp BOM and its version.
    implementation(platform("com.squareup.okhttp3:okhttp-bom:4.9.0"))
    implementation("com.squareup.okhttp3:okhttp")
    implementation("com.squareup.okhttp3:logging-interceptor")
    testImplementation("com.squareup.okhttp3:mockwebserver")
    testImplementation 'junit:junit:4.+'
}